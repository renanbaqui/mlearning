# -*- coding: utf-8 -*-
"""Tarefa - Câncer de Mama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zskIcWaHRD0dYGL7EQP603b_C98v0wc_
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn import metrics
import matplotlib.pyplot as plt
import numpy as np
 
breast = load_breast_cancer()
breast.keys()

print(breast['DESCR'][:1150] + '\n...')

breast['target_names'] #tipos de diagnostico

breast['feature_names'] #descrição dos atributos

print(breast['data'].shape)
breast['data'][:3] #contém os atributos das cinco primeiras pacientes

#um vetor numpy que contém valores de 0 ou 1. Cada um tipo de diagnóstico. 0 para maligno, 1 para benigno
breast['target']

X_train, X_test, y_train, y_test = train_test_split(breast['data'], breast['target'], random_state = 0)

print(X_train.shape)
print(X_test.shape)

fig, ax = plt.subplots(3, 3, figsize=(15,15))

for i in range(3):
    for j in range(3):
        ax[i,j].scatter(X_train[:,j], X_train[:, i + 1], c=y_train, s=60)
        ax[i,j].set_xticks(())
        ax[i,j].set_yticks(())
        
        if i == 2:
            ax[i,j].set_xlabel(breast['feature_names'][j])
        if j == 0:
            ax[i,j].set_ylabel(breast['feature_names'][i + 1])
        if j > i:
            ax[i,j].set_visible(False)

#criando o modelo de classificação knn
knn = KNeighborsClassifier(n_neighbors = 1)
knn.fit(X_train, y_train)

breast.target[[10, 50, 200]] #diagnóstico (target) das pacientes 10, 50 e 200

print(breast['data'].shape)
breast['data'][200] #contém os atributos da paciente 200, que tem o diagnóstico benigno (1)

#testando o modelo
X_new = np.array([[1.223e+01, 1.956e+01, 7.854e+01, 4.610e+02, 9.586e-02, 8.087e-02,
       4.187e-02, 4.107e-02, 1.979e-01, 6.013e-02, 3.534e-01, 1.326e+00,
       2.308e+00, 2.724e+01, 7.514e-03, 1.779e-02, 1.401e-02, 1.140e-02,
       1.503e-02, 3.338e-03, 1.444e+01, 2.836e+01, 9.215e+01, 6.384e+02,
       1.429e-01, 2.042e-01, 1.377e-01, 1.080e-01, 2.668e-01, 8.174e-02]])
X_new.shape

prediction = knn.predict(X_new) #a previsão é de que a paciente tenha o diagnóstico benigno (1), que está correto
prediction

breast['target_names'][prediction]

#acurácia do modelo
knn.score(X_test, y_test)

#criando o modelo de classificação árvore de decisão
from sklearn.datasets import load_breast_cancer
from sklearn import tree
X, y = load_breast_cancer(return_X_y=True)
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X_train, y_train)

tree.plot_tree(clf)

#plot da árvore de decisão
import graphviz 
dot_data = tree.export_graphviz(clf, out_file=None) 
graph = graphviz.Source(dot_data) 
graph.render("breast_cancer")

dot_data = tree.export_graphviz(clf, out_file=None, 
                      feature_names=breast.feature_names,  
                      class_names=breast.target_names,  
                      filled=True, rounded=True,  
                      special_characters=True)  
graph = graphviz.Source(dot_data)  
graph

print(knn.score(X_test, y_test))
print(clf.score(X_test, y_test))
previsto = knn.predict(X_test)

print(classification_report(y_test, previsto, target_names=breast.target_names))