# -*- coding: utf-8 -*-
"""Tarefa Vinho.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SH7kLgd_gPkSRFhMZ0oZlO7ys5uLP4Xx
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt
import numpy as np
 
wine = load_wine()
wine.keys()

print(wine['DESCR'][:600] + '\n...')

wine['target_names'] #tipos de vinho

wine['feature_names'] #descrição dos atributos

print(wine['data'].shape)
wine['data'][:3] #contém os atributos de cada vinho

#um vetor numpy que contém valores de 0 a 2. Cada um tipo de vinho. 0 para class_0, 1 para class_1 e 2 para class_2
wine['target']

X_train, X_test, y_train, y_test = train_test_split(wine['data'], wine['target'], random_state = 20)

print(X_train.shape)
print(X_test.shape)

fig, ax = plt.subplots(3, 3, figsize=(15,15))

for i in range(3):
    for j in range(3):
        ax[i,j].scatter(X_train[:,j], X_train[:, i + 1], c=y_train, s=60)
        ax[i,j].set_xticks(())
        ax[i,j].set_yticks(())
        
        if i == 2:
            ax[i,j].set_xlabel(wine['feature_names'][j])
        if j == 0:
            ax[i,j].set_ylabel(wine['feature_names'][i + 1])
        if j > i:
            ax[i,j].set_visible(False)

#criando o modelo
knn = KNeighborsClassifier(n_neighbors = 1)
knn.fit(X_train, y_train)

#testando o modelo
X_new = np.array([[1.423e+01, 1.710e+00, 2.430e+00, 1.560e+01, 1.270e+02, 2.800e+00,
        3.060e+00, 2.800e-01, 2.290e+00, 5.640e+00, 1.040e+00, 3.920e+00,
        1.065e+03]])
X_new.shape

prediction = knn.predict(X_new)
prediction

wine['target_names'][prediction]

#acurácia do modelo
knn.score(X_test, y_test)